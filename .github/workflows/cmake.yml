name: CMake

on:
  push:
    branches: [ main, dev, CI-versions ]
  pull_request:
    branches: [ main, dev ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
   build-boost:
     runs-on: ubuntu-20.04

     defaults:
       run:
         working-directory: ${{github.workspace}}/lib

     steps: # Note: Using a matrix strategy will end in building Boost 4 times.
       - uses: actions/checkout@v2

       - name: Set Up Python 3.6
         uses: actions/setup-python@v2
         with:
           python-version: '3.6'

       - name: Write Python 3.6 config to user-config.jam
         run: |
          echo "using python:\n\t 3.6\n\t: $pythonLocation/bin/python\n\t: $pythonLocation/include/python\n\t: $pythonLocation/lib"
          ls $pythonLocation
          ls $pythonLocation/include
          ls $pythonLocation/include/python

       - name: Set Up Python 3.7
         uses: actions/setup-python@v2
         with:
           python-version: '3.7'

       - name: Write Python 3.7 to user-config.jam
         run: |
           echo "using python:\n\t 3.7\n\t: $pythonLocation/bin/python\n\t: $pythonLocation/include/python\n\t: $pythonLocation/lib"

       - name: Set Up Python 3.8
         uses: actions/setup-python@v2
         with:
           python-version: '3.8'

       - name: Write Python 3.8 to user-config.jam
         run: |
           echo "using python:\n\t 3.8\n\t: $pythonLocation/bin/python\n\t: $pythonLocation/include/python\n\t: $pythonLocation/lib"

       - name: Set Up Python 3.9
         uses: actions/setup-python@v2
         with:
           python-version: '3.9'

       - name: Write Python 3.9 to user-config.jam
         run: |
           echo "using python:\n\t 3.9\n\t: $pythonLocation/bin/python\n\t: $pythonLocation/include/python\n\t: $pythonLocation/lib"


       - name: Test user-config.jam
         run: cat ${{github.workspace}}/.github/config/boost



#  build-libs:
#    runs-on: ubuntu-20.04
#
#    defaults:
#      run:
#        working-directory: ${{github.workspace}}/lib
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Update package lists
#        run: sudo apt update
#
#      - name: Cache Armadillo, GDAL, Boost and LASTools
#        id: cache-boost-lastools-armadillo
#        uses: actions/cache@v2
#        with:
#          path: |
#            ${{github.workspace}}/lib
#          key: ${{ runner.os }}-boost.1.76-gdal-lastools-armadillo-latest
#
#
#        ##### ARMADILLO #####
#      - name: Build Armadillo
#        if: steps.cache-boost-lastools-armadillo.outputs.cache-hit != 'true'
#        run: |
#          wget -O armadillo.tar.xz http://sourceforge.net/projects/arma/files/armadillo-10.6.2.tar.xz && tar xf armadillo.tar.xz && mv armadillo-10.6.2 armadillo
#          cd armadillo && ./configure -DCMAKE_INSTALL_PREFIX=. && make && make install
#
#
#        ##### GDAL #####
#      - name: Build GDAL
#        if: steps.cache-boost-lastools-armadillo.outputs.cache-hit != 'true'
#        run: |
#          sudo apt install -y pkg-config libsqlite3-dev sqlite3 libtiff5-dev libcurl4-openssl-dev
#          wget http://download.osgeo.org/proj/proj-8.0.0.tar.gz https://github.com/OSGeo/gdal/releases/download/v3.3.0/gdal-3.3.0.tar.gz --no-check-certificate
#          tar -xzvf proj-8.0.0.tar.gz && tar -xzvf gdal-3.3.0.tar.gz
#          mv gdal-3.3.0 ${{github.workspace}}/lib/gdal && mv proj-8.0.0 ${{github.workspace}}/lib/proj
#          cd ${{github.workspace}}/lib/proj && ./configure --prefix=${{github.workspace}}/lib/gdal/projlib && make && make install
#          cd ${{github.workspace}}/lib/gdal && ./configure --prefix=${{github.workspace}}/lib/gdal --with-proj=${{github.workspace}}/lib/gdal/projlib && make && make install
#
#        ##### Boost #####
#      - name: Build Boost
#        if: steps.cache-boost-lastools-armadillo.outputs.cache-hit != 'true'
#        run: |
#          wget https://boostorg.jfrog.io/artifactory/main/release/1.76.0/source/boost_1_76_0.tar.gz && tar -xzvf boost_1_76_0.tar.gz && mv boost_1_76_0 boost && cd boost
#          ./bootstrap.sh --with-python=python3.8
#          ./b2 cxxflags=-fPIC
#
#        ##### LasTools #####
#      - name: Build LASTools
#        if: steps.cache-boost-lastools-armadillo.outputs.cache-hit != 'true'
#        run: |
#          wget -O LAStools.zip http://lastools.github.io/download/LAStools.zip
#          unzip LAStools.zip -d ${{github.workspace}}/lib
#          cd LAStools && cmake . && make
#
#  build-helios-pybinds-static_linking:
#    # The CMake configure and build commands are platform agnostic and should work equally
#    # well on Windows or Mac.  You can convert this to a matrix build if you need
#    # cross-platform coverage.
#    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#    needs: [build-libs]
#
#    runs-on: ubuntu-latest
#
#
#    defaults:
#      run:
#        working-directory: ${{github.workspace}}
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Update package lists
#      run: sudo apt update
#
#    - name: Install required packages
#      run: sudo apt-get install -y cmake libglm-dev zip unzip xz-utils
#
#    - name: Python Libraries
#      run: sudo apt-get install -y libpython3-dev
#
#    - name: Load libraries from cache
#      id: cache-boost-lastools-armadillo
#      uses: actions/cache@v2
#      with:
#        path: |
#          ${{github.workspace}}/lib
#        key: ${{ runner.os }}-boost.1.76-gdal-lastools-armadillo-latest
#
#
#    - name: Configure CMake
#      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DPYTHON_BINDING=1 -DPYTHON_VERSION=38 -DCMAKE_RUNTIME_OUTPUT_DIRECTORY:STRING=${{github.workspace}}/build
#
#    - name: Build
#      # Build your program with the given configuration
#      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
#
#
#    - name: ls
#      run: ls -al .
#
#    - name: Test
#      # Execute tests defined by the CMake configuration.
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ${{github.workspace}}/build/helios --test
#
#    - name: Save compiled executable
#      uses: actions/upload-artifact@v2
#      with:
#          name: linux-executable
#          path: ${{github.workspace}}/build/helios*
#
#  build-helios-pybinds-dynamic_linking:
#    # The CMake configure and build commands are platform agnostic and should work equally
#    # well on Windows or Mac.  You can convert this to a matrix build if you need
#    # cross-platform coverage.
#    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#    needs: [ build-libs ]
#
#    runs-on: ubuntu-latest
#
#
#    defaults:
#      run:
#        working-directory: ${{github.workspace}}
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Update package lists
#        run: sudo apt update
#
#      - name: Install required packages
#        run: sudo apt-get install -y cmake libglm-dev zip unzip xz-utils
#
#      - name: Python Libraries
#        run: sudo apt-get install -y libpython3-dev
#
#      - name: Load libraries from cache
#        id: cache-boost-lastools-armadillo
#        uses: actions/cache@v2
#        with:
#          path: |
#            ${{github.workspace}}/lib
#          key: ${{ runner.os }}-boost.1.76-gdal-lastools-armadillo-latest
#
#      - name: Install Boost in the system
#        run: cd lib/boost && sudo ./b2 install
#
#      - name: Configure CMake
#        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#        run: |
#          ls ./lib
#          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DPYTHON_BINDING=1 -DPYTHON_VERSION=38 -DBOOST_DYNAMIC_LIBS=1 -DCMAKE_RUNTIME_OUTPUT_DIRECTORY:STRING=${{github.workspace}}/build
#
#      - name: Build
#        # Build your program with the given configuration
#        run:
#          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
#
#
#      - name: ls
#        run: ls -al .
#
#      - name: Test
#        # Execute tests defined by the CMake configuration.
#        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#        run: ${{github.workspace}}/build/helios --test
#
#      - name: Save compiled executable
#        uses: actions/upload-artifact@v2
#        with:
#          name: linux-executable
#          path: ${{github.workspace}}/build/helios*
